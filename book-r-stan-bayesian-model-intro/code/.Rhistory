data_list <- list(sales = file_beer_sales_1$sales, N = sample_size)
mcmc_result <- stan(
file = 'calc-mean-variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
# 結果の表示
print(
mcmc_result,                   # MCMCサンプリングの結果
probs = c(0.025, 0.5, 0.975)   # 中央値と95%信用区間を出力
)
rstan:::rstudio_stanc("2-4-2-calc-mean-variance-vec.stan")
rstan:::rstudio_stanc("2-4-2-calc-mean-variance-vec.stan")
rstan:::rstudio_stanc("2-4-2-calc-mean-variance-vec.stan")
rstan:::rstudio_stanc("2-4-2-calc-mean-variance-vec.stan")
# パッケージの読み込み
library(rstan)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# データの読み込み ----------------------------------------------------------------
# 分析対象のデータ
file_beer_sales_1 <- read.csv("2-4-1-beer-sales-1.csv")
# データの確認
head(file_beer_sales_1, n = 3)
# Stanに渡すためにデータを整形する ------------------------------------------------------
# サンプルサイズ
sample_size <- nrow(file_beer_sales_1)
sample_size
# listにまとめる
data_list <- list(sales = file_beer_sales_1$sales, N = sample_size)
data_list
# MCMCによるサンプリングの実施 -----------------------------------------------------------------
# 乱数の生成
mcmc_result <- stan(
file = "2-4-1-calc-mean-variance.stan", # stanファイル
data = data_list,                       # 対象データ
seed = 1,                               # 乱数の種
chains = 4,                             # チェーン数
iter = 2000,                            # 乱数生成の繰り返し数
warmup = 1000,                          # バーンイン期間
thin = 1                                # 間引き数(1なら間引き無し)
)
# 結果の表示
print(
mcmc_result,                   # MCMCサンプリングの結果
probs = c(0.025, 0.5, 0.975)   # 中央値と95%信用区間を出力
)
# 分析対象のデータ
file_beer_sales_1 <- read.csv("2-4-1-beer-sales-1.csv")
# パッケージの読み込み
library(rstan)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# データの読み込み ----------------------------------------------------------------
# 分析対象のデータ
file_beer_sales_1 <- read.csv("2-4-1-beer-sales-1.csv")
# データの確認
head(file_beer_sales_1, n = 3)
# Stanに渡すためにデータを整形する ------------------------------------------------------
# サンプルサイズ
sample_size <- nrow(file_beer_sales_1)
sample_size
# listにまとめる
data_list <- list(sales = file_beer_sales_1$sales, N = sample_size)
data_list
# MCMCによるサンプリングの実施 -----------------------------------------------------------------
# 乱数の生成
mcmc_result <- stan(
file = "2-4-1-calc-mean-variance.stan", # stanファイル
data = data_list,                       # 対象データ
seed = 1,                               # 乱数の種
chains = 4,                             # チェーン数
iter = 2000,                            # 乱数生成の繰り返し数
warmup = 1000,                          # バーンイン期間
thin = 1                                # 間引き数(1なら間引き無し)
)
# 結果の表示
print(
mcmc_result,                   # MCMCサンプリングの結果
probs = c(0.025, 0.5, 0.975)   # 中央値と95%信用区間を出力
)
a
traceplot(mcmc_result)
traceplot(mcmc_result, inc_warmup=T)
mcmc_sample <- rstan::extract(mcmc_result, permuted = FALSE)
class(mcmc_sample)
dim(mcmc_sample)
dimnames(mcmc_sample)
mcmc_sample[1, 'chain:1', 'mu']
mcmc_sample['chain:1', 'mu']
mcmc_sample[, 'chain:1', 'mu']
length(mcmc_sample[, 'chain:1', 'mu'])
length(mcmc_sample[, , 'mu'])
dim(mcmc_sample[, , 'mu'])
class(mcmc_sample[, , 'mu'])
mu_mcmc_vec <- as.vector(mcmc_sample[, , 'mu'])
median(mu_mcmc_vec)
mean(mu_mcmc_vec)
quantile(mu_mcmc_vec, probs=c(0.025, 0.975))
print(
mcmc_result,                   # MCMCサンプリングの結果
probs = c(0.025, 0.5, 0.975)   # 中央値と95%信用区間を出力
)
library(ggfortify)
autoplot(ts(mcmc_sample[, , 'mu']),
facets = F,
ylab = 'mu',
main = 'trace plot')
mu_df <- data.frame(
mu_mcmc_sample = mu_mcmc_vec
)
ggplot(data = mu_df, mapping = aes(x = mu_mcmc_sample)) + geom_density(size=1.5)
library(bayesplot)
install.packages("bayesplot")
install.packages("bayesplot")
library(bayesplot)
library(bayesplot)
mcmc_hist(mcmc_sample, pars = c('mu', 'sigma'))
mcmc_dens(mcmc_sample, pars = c('mu', 'sigma'))
mcmc_trace(mcmc_sample, pars = c('mu', 'sigma'))
mcmc_combo(mcmc_sample, pars = c('mu', 'sigma'))
mcmc_intervals(
mcmc_sample, pars = c('mu', 'sigma'),
prob = 0.8,
prob_outer = 0.95
)
mcmc_ares(
mcmc_sample, pars = c('mu', 'sigma'),
prob = 0.6,
prob_outer = 0.99
)
mcmc_areas(
mcmc_sample, pars = c('mu', 'sigma'),
prob = 0.6,
prob_outer = 0.99
)
source('~/study/book-r-stan-bayesian-model-intro/code/2-4-stan_basic.R', echo=TRUE)
mcmc_acf_bar(mcmc_sample, pars = c('mu', 'sigma'))
animal_num <- read.csv('../book-data/2-5-1-animal-num.csv')
head(animal_num, n=3)
sample_size <- nrow(animal_num)
data_list <- list(animal_num= anima_num$animal_num, N=sample_size)
data_list <- list(animal_num= anima_lnum$animal_num, N=sample_size)
data_list <- list(animal_num= animal_num$animal_num, N=sample_size)
data_list <- list(animal_num= animal_num$animal_num, N=sample_size)
data_list
mcmc_normal <- stan(
file = 'poisson-dist.stan',
data = data_list,
seed = 1
)
# パッケージの読み込み
library(rstan)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# データの読み込み ----------------------------------------------------------------
# 分析対象のデータ
file_beer_sales_1 <- read.csv("2-4-1-beer-sales-1.csv")
# データの確認
head(file_beer_sales_1, n = 3)
# Stanに渡すためにデータを整形する ------------------------------------------------------
# サンプルサイズ
sample_size <- nrow(file_beer_sales_1)
sample_size
# listにまとめる
data_list <- list(sales = file_beer_sales_1$sales, N = sample_size)
data_list
# MCMCによるサンプリングの実施 -----------------------------------------------------------------
# 乱数の生成
mcmc_result <- stan(
file = "2-4-1-calc-mean-variance.stan", # stanファイル
data = data_list,                       # 対象データ
seed = 1,                               # 乱数の種
chains = 4,                             # チェーン数
iter = 2000,                            # 乱数生成の繰り返し数
warmup = 1000,                          # バーンイン期間
thin = 1                                # 間引き数(1なら間引き無し)
)
# 結果の表示
print(
mcmc_result,                   # MCMCサンプリングの結果
probs = c(0.025, 0.5, 0.975)   # 中央値と95%信用区間を出力
)
traceplot(mcmc_result)
traceplot(mcmc_result, inc_warmup=T)
mcmc_sample <- rstan::extract(mcmc_result, permuted = FALSE)
class(mcmc_sample)
dim(mcmc_sample)
dimnames(mcmc_sample)
mcmc_sample[1, 'chain:1', 'mu']
mcmc_sample[, 'chain:1', 'mu']
length(mcmc_sample[, 'chain:1', 'mu'])
length(mcmc_sample[, , 'mu'])
dim(mcmc_sample[, , 'mu'])
class(mcmc_sample[, , 'mu'])
mu_mcmc_vec <- as.vector(mcmc_sample[, , 'mu'])
median(mu_mcmc_vec)
mean(mu_mcmc_vec)
quantile(mu_mcmc_vec, probs=c(0.025, 0.975))
print(
mcmc_result,                   # MCMCサンプリングの結果
probs = c(0.025, 0.5, 0.975)   # 中央値と95%信用区間を出力
)
library(ggfortify)
autoplot(ts(mcmc_sample[, , 'mu']),
facets = F,
ylab = 'mu',
main = 'trace plot')
mu_df <- data.frame(
mu_mcmc_sample = mu_mcmc_vec
)
ggplot(data = mu_df, mapping = aes(x = mu_mcmc_sample)) + geom_density(size=1.5)
library(bayesplot)
mcmc_hist(mcmc_sample, pars = c('mu', 'sigma'))
mcmc_dens(mcmc_sample, pars = c('mu', 'sigma'))
mcmc_trace(mcmc_sample, pars = c('mu', 'sigma'))
mcmc_combo(mcmc_sample, pars = c('mu', 'sigma'))
mcmc_intervals(
mcmc_sample, pars = c('mu', 'sigma'),
prob = 0.8,
prob_outer = 0.95
)
mcmc_areas(
mcmc_sample, pars = c('mu', 'sigma'),
prob = 0.6,
prob_outer = 0.99
)
mcmc_acf_bar(mcmc_sample, pars = c('mu', 'sigma'))
animal_num <- read.csv('../book-data/2-5-1-animal-num.csv')
head(animal_num, n=3)
sample_size <- nrow(animal_num)
data_list <- list(animal_num= animal_num$animal_num, N=sample_size)
mcmc_normal <- stan(
file = 'poisson-dist.stan',
data = data_list,
seed = 1
)
sample_size <- nrow(animal_num)
data_list <- list(animal_num= animal_num$animal_num, N=sample_size)
mcmc_normal <- stan(
file = 'poisson-dist.stan',
data = data_list,
seed = 1
)
data_list <- list(animal_num　= animal_num$animal_num, N=sample_size)
mcmc_normal <- stan(
file = 'normal-dist.stan',
data = data_list,
seed = 1
)
mcmc_normal
mcmc_poisson <- stan(
file = 'poisson-dist.stan',
data = data_list,
seed = 1
)
y_rep_normal <- rstan::extract(mcmc_normal)$pred
y_rep_poisson <- rstan::extract(mcmc_poisson)$pred
dim(y_rep_normal)
dim(y_rep_poisson)
mcmc_normal <- stan(
file = 'normal-dist.stan',
data = data_list,
seed = 1
)
y_rep_normal <- rstan::extract(mcmc_normal)$pred
y_rep_poisson <- rstan::extract(mcmc_poisson)$pred
dim(y_rep_poisson)
dim(y_rep_normal)
y_rep_normal
y_rep_normal[1, ]
y_rep_poisson[1, ]
hist(animal_num$animal_num)
hist(y_rep_normal[1,])
hist(y_rep_poisson[1,])
hist(animal_num$animal_num)
hist(y_rep_poisson[1,])
hist(y_rep_poisson[1,])
hist(y_rep_normal[1,])
hist(animal_num$animal_num)
ppc_hist(y = animal_num$animal_num, yrep = y_rep_normal[1:5], )
library(bayesplot)
ppc_hist(y = animal_num$animal_num, yrep = y_rep_normal[1:5], )
ppc_hist(y = animal_num$animal_num, yrep = y_rep_normal[1:5,] )
ppc_hist(y = animal_num$animal_num, yrep = y_rep_poisson[1:5,] )
file_beer_sales_ab <- read.csv('../book-data/2-6-1-beer-sales-ab.csv')
head(file_beer_sales_ab, n=4)
ggplot(data=file_beer_sales_ab, mapping = aes(x = sales, y = ..density.., color = beer_name, fill = beer_name)) +
geom_histogram(alpha=0.4, position = 'identity') +
geom_density(alpha=0.4, size=0)
sales_a <- file_beer_sales_ab$sales[1:100]
sales_b <- file_beer_sales_ab$sales[101:200]
data_list <- list(
sales_a = sales_a,
sales_b = sales_b,
N = 100
)
data_list
mcmc_result_6 <- stan(
file = 'difference-mean.stan',
data = data_list,
seed = 1
)
print(mcmc_result_6, probs=c(0.025, 0.5, 0.975))
rstan:::rstudio_stanc("difference-mean.stan")
rstan:::rstudio_stanc("difference-mean.stan")
mcmc_result_6 <- stan(
file = 'difference-mean.stan',
data = data_list,
seed = 1
)
print(mcmc_result_6, probs=c(0.025, 0.5, 0.975))
mcmc_result_6
data_list_ab <- list(
sales_a = sales_a,
sales_b = sales_b,
N = 100
)
mcmc_result_6 <- stan(
file = 'difference-mean.stan',
data = data_list_ab,
seed = 1
)
print(mcmc_result_6, probs=c(0.025, 0.5, 0.975))
mcmc_result_6
file_beer_sales_ab <- read.csv('../book-data/2-6-1-beer-sales-ab.csv')
head(file_beer_sales_ab, n=4)
ggplot(data=file_beer_sales_ab, mapping = aes(x = sales, y = ..density.., color = beer_name, fill = beer_name)) +
geom_histogram(alpha=0.4, position = 'identity') +
geom_density(alpha=0.4, size=0)
sales_a <- file_beer_sales_ab$sales[1:100]
sales_b <- file_beer_sales_ab$sales[101:200]
data_list_ab <- list(
sales_a = sales_a,
sales_b = sales_b,
N = 100
)
mcmc_result_6 <- stan(
file = 'difference-mean.stan',
data = data_list_ab,
seed = 1
)
print(mcmc_result_6, probs=c(0.025, 0.5, 0.975))
mcmc_result_6
data_ist
data_ist
data_ist
data_ist
data_ist_ab
sales_a
data_ist_ab
data_list_ab
data_list_ab
mcmc_result_6 <- stan(
file = 'difference-mean.stan',
data = data_list_ab,
seed = 1
)
print(mcmc_result_6, probs=c(0.025, 0.5, 0.975))
mcmc_result_6
sales_a
data_list_ab
mcmc_result_6 <- stan(
file = 'difference-mean.stan',
data = data_list_ab,
seed = 1
)
print(mcmc_result_6, probs=c(0.025, 0.5, 0.975))
mcmc_result_6
rstan:::rstudio_stanc("difference-mean.stan")
mcmc_result_6 <- stan(
file = 'difference-mean.stan',
data = data_list_ab,
seed = 1
)
print(mcmc_result_6, probs=c(0.025, 0.5, 0.975))
mcmc_result_6
mcmc_sample <- rstan::extract(mcmc_result_6, permuted = FALSE)
mcmc_dens(mcmc_sample, pars='diff')
library(rstan)
library(bayesplot)
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_2 <- read.csv('../book-data/3-2-1-beer-sales-2.csv')
head(file_beer_sales_2, n=3)
sample_size <- nrow(file_beer_sales_2)
sample_size
ggplot(file_beer_sales_2, aes(x=temperature, y=sales)) + geom_point() + labs(titl='scatter plot')
data_list <- list(
N = sample_list,
sales = file_beer_sales_2$sales,
temperature = file_beer_sales_2$temperature
)
data_list <- list(
N = sample_size,
sales = file_beer_sales_2$sales,
temperature = file_beer_sales_2$temperature
)
mcmc_result <- stan(
file = 'simple-lm.stan',
data = data_list,
seed = 1
)
print(mcmc_result, probs = c(0.0025, 0.5, 0.975))
mcmc_sample <- rstan::extract(mcmc_result, permuted = FALSE)
mcmc_combo(mcmc_sample, pars=c('Intercept', 'beta', 'sigma'))
mcmc_combo(mcmc_sample, pars=c('Intercept', 'beta', 'sigma'))
library(rstan)
library(bayesplot)
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_2 <- read.csv('../book-data/3-2-1-beer-sales-2.csv')
sample_size <- nrow(file_beer_sales_2)
sample_size
temperature_pred < 11:30
temperature_pred
temperature_pred <- 11:30
temperature_pred
data_list
data_list_pred
data_list_pred <- list(
N = sample_size,
sales = file_beer_sales_2$sales,
tem
)
data_list_pred <- list(
N = sample_size,
sales = file_beer_sales_2$sales,
N_pred = length(temperature_pred),
temperature_pred = temperature_pred
)
data_list_pred
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list,
seed = 1
)
print(mcmc_result_pred)
temeprature_pred
data_list_pred <- list(
N = sample_size,
sales = file_beer_sales_2$sales,
N_pred = length(temperature_pred),
temperature_pred = temperature_pred
)
data_list_pred
temperature_pred
data_list_pred
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list,
seed = 1
)
print(mcmc_result_pred)
print(mcmc_result_pred)
print(mcmc_result_pred)
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list,
seed = 1
)
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list,
seed = 1
)
print(mcmc_result_pred)
library(rstan)
library(bayesplot)
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_2 <- read.csv('../book-data/3-2-1-beer-sales-2.csv')
sample_size <- nrow(file_beer_sales_2)
sample_size
temperature_pred <- 11:30
temperature_pred
data_list_pred <- list(
N = sample_size,
sales = file_beer_sales_2$sales,
temperature = file_beer_sales_2$temperature,
N_pred = length(temperature_pred),
temperature_pred = temperature_pred
)
data_list_pred
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list,
seed = 1
)
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list_pred,
seed = 1
)
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list_pred,
seed = 1
)
print(mcmc_result_pred)
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list_pred,
seed = 1
)
