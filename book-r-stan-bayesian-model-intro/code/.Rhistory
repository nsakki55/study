data_list <=- list(
sales_a = sales_a,
sales_b = sales_b,
N = nrow(sales_a)
)
data_list <- list(
sales_a = sales_a,
sales_b = sales_b,
N = nrow(sales_a)
)
file_beer_sales_ab <- read.csv('data/2-6-1-beer-sales-ab.csv')
mcmc_result <- stan(
file = 'difference-mean.stan',
data = data_list,
seed = 1
)
data_list <- list(
sales_a = sales_a,
sales_b = sales_b,
N = nrow(sales_a)
)
mcmc_result <- stan(
file = 'difference-mean.stan',
data = data_list,
seed = 1
)
mcmc_result
data_list <- list(
sales_a = sales_a,
sales_b = sales_b,
N = 100
)
mcmc_result <- stan(
file = 'difference-mean.stan',
data = data_list,
seed = 1
)
mcmc_result
mcmc_sample <- rstan::extract(mcmc_result, permuted=FALSE)
mcmc_dens(mcmc_samplem pars='diff')
mcmc_dens(mcmc_samplem, pars='diff')
mcmc_dens(mcmc_sample, pars='diff')
library(rstan)
library(bayesplot)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_2 <- read.csv('data/3-2-1-beer-sales-2.csv')
file_beer_sales_2
ggplot(data=file_beer_sales_2, mapping=aes(x=temperature, y=sales)) +
geom_point()
ggplot(data=file_beer_sales_2, mapping=aes(x=temperature)) +
geom_histogram()
ggplot(data=file_beer_sales_2, mapping=aes(x=sales)) +
geom_histogram()
rstan:::rstudio_stanc("simple-lm.stan")
data_list <- list(
N = nrow(file_beer_sales_2),
sales = file_beer_sales_2$sales,
temperature = file_beer_sales_2$temperature
)
mcmc_result <- stan(
file = 'simple-lm.stan',
data = data_list,
seed = 1
)
print(mcmc_result)
mcmc_sample <- rstan::extract(mcmc_result, permuted=FALSE)
mcmc_combo(
mcmc_sample,
pars = c('Intercept', 'beta', 'sigma')
)
mcmc_areas(mcmc_sample,
pars = c('Intercept', 'beta', 'sigma'),
prob = 0.8)
rstan:::rstudio_stanc("simple-lm.stan")
mcmc_result <- stan(
file = 'simple-lm.stan',
data = data_list,
seed = 1
)
y_pred <- rstan::extract(mcmc_result, permuted=FALSE)$pred
y_pred
y_pred <- rstan::extract(mcmc_result)$pred
y_pred
dim(y_pred)
ppc_hist(y = file_beer_sales_2$sales, yrep=y_pred[1,])
ppc_hist(y = file_beer_sales_2$sales, yrep=y_pred[1:3,])
ppc_hist(y = file_beer_sales_2$sales, yrep=y_pred[1:5,])
temperature_pred <- 11:30
data_list <- list(
N = nrow(file_beer_sales_2),
sales = file_beer_sales_2$sales,
temperature = file_beer_sales_2$temperature,
N_pred = length(temperature_pred),
temperature_pred = temperature_pred
)
rstan:::rstudio_stanc("simple-lm-pred.stan")
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list,
seed = 1
)
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list,
seed = 1
)
rstan:::rstudio_stanc("simple-lm-pred.stan")
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list,
seed = 1
)
rstan:::rstudio_stanc("simple-lm-pred.stan")
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list,
seed = 1
)
print(mcmc_result_pred)
mcmc_sample_pred <- rstan::extract(mcmc_result_pred, permuted=FALSE)
mcmc_intervals(
mcmc_sample_pred,
regex_pred = c('sales_pred.'),
prob = 0.8,
prob_outer = 0.95
)
mcmc_intervals(
mcmc_sample_pred,
regex_pred = c('sales_pred*'),
prob = 0.8,
prob_outer = 0.95
)
mcmc_intervals(
mcmc_sample_pred,
regex_pred = c('sales_pred'),
prob = 0.8,
prob_outer = 0.95
)
mcmc_intervals(
mcmc_sample_pred,
regex_pred = c("sales_pred."),
prob = 0.8,
prob_outer = 0.95
)
mcmc_intervals(
mcmc_sample_pred,
regex_pred = c("mu_pred[1]","sales_pred[1]"),
prob = 0.8,
prob_outer = 0.95
)
mcmc_sample_pred
mcmc_sample_pred.parameters
dimnames(mcmc_sample_pred)
mcmc_intervals(
mcmc_sample_pred,
regex_pred = c("mu_pred[2]","sales_pred[1]"),
prob = 0.8,
prob_outer = 0.95
)
mcmc_areas(
mcmc_sample_pred,
regex_pred = c("mu_pred[1]","sales_pred[1]"),
prob = 0.8,
)
mcmc_areas(
mcmc_sample_pred,
regex_pred = c("sales_pred[1]","sales_pred[10]"),
prob = 0.8,
prob_outer = 0.99
)
mcmc_areas(
mcmc_sample_pred,
pars = c("sales_pred[1]","sales_pred[10]"),
prob = 0.8,
prob_outer = 0.99
)
mcmc_intervals(
mcmc_sample_pred,
pars = c("mu_pred[2]","sales_pred[1]"),
prob = 0.8,
prob_outer = 0.95
)
library(rstan)
library(bayesplot)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_2 <- read.csv('data/3-2-1-beer-sales-2.csv')
formula_lm <- formula(sales ~ temperature)
X <- model.matrix(forumula_lm, file_beer_sales_2)
X <- model.matrix(formula_lm, file_beer_sales_2)
X
rstan:::rstudio_stanc("lm-design-matrix.stan")
rstan:::rstudio_stanc("lm-design-matrix.stan")
N <- nrow(file_beer_sales_2)
K <- 2
Y <- file_beer_sales_2$sales
data_list_design <- list(N = N, K = K, Y =Y, X = X)
mcmc_result_design <- stan(
file = 'lm-design-matrix.stan',
data = data_list,
seed = 1
)
mcmc_result_design
rstan:::rstudio_stanc("lm-design-matrix.stan")
rstan:::rstudio_stanc("lm-design-matrix.stan")
mcmc_result_design <- stan(
file = 'lm-design-matrix.stan',
data = data_list,
seed = 1
)
mcmc_result_design
mcmc_result_design <- stan(
file = 'lm-design-matrix.stan',
data = data_list_design,
seed = 1
)
mcmc_result_design
library(rstan)
library(bayesplot)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_2 <- read.csv('data/3-2-1-beer-sales-2.csv')
library(brms)
simple_lm_brms <- brm(
formula = sales ~ temperature,
family = gaussian(link = 'identity'),
data = file_beer_sales_2,
seed = 1
)
fix_Mac <- function(sm) {
stopifnot(is(sm, "stanmodel"))
dso_last_path <- sm@dso@.CXXDSOMISC$dso_last_path
CLANG_DIR <- tail(n = 1, grep("clang[456789]",
x = list.dirs("/usr/local", recursive = FALSE),
value = TRUE))
if (length(CLANG_DIR) == 0L) stop("no clang from CRAN found")
LIBCPP <- file.path(CLANG_DIR, "lib", "libc++.1.dylib")
if (!file.exists(LIBCPP)) stop("no unique libc++.1?.dylib found")
Rv <- R.version
GOOD <- file.path("/Library", "Frameworks", "R.framework", "Versions",
paste(Rv$major, substr(Rv$minor, 1, 1), sep = "."),
"Resources", "lib", "libc++.1.dylib")
if (!file.exists(GOOD)) stop(paste(GOOD, "not found"))
cmd <- paste(
"install_name_tool",
"-change",
LIBCPP,
GOOD,
dso_last_path
)
system(cmd)
dyn.unload(dso_last_path)
dyn.load(dso_last_path)
return(invisible(NULL))
}
fix_Mac()
fix_Mac
simple_lm_brms <- brm(
formula = sales ~ temperature,
family = gaussian(link = 'identity'),
data = file_beer_sales_2,
seed = 1
)
simple_lm_brms
source('fix_mac.R')
as.mcmc(simple_lm_brms, combine_chains = TRUE)
plot(simple_lm_brms)
gaussian()
binomial()
poisson()
simple_lm_formula <- bf(sales ~ temperature)
simple_lm_brms_2 <- brm(
formula = simple_lm_formula,
family = gaussian(),
data = file_beer_sales_2,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
prior_summary(simple_lm_brms)
simple_lm_brms_3 <- brm(
formula = simple_lm_formula,
family = gaussian(),
data = file_beer_sales_2,
seed = 1,
prior = c(set_prior('', class = 'Intercept'),
set_prior('', class = 'sigma'))
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
simple_lm_brms_3 <- brm(
formula = simple_lm_formula,
family = gaussian(),
data = file_beer_sales_2,
seed = 1,
prior = c(set_prior('', class = 'Intercept'),
set_prior('', class = 'sigma')),
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
get_prior(
formula = sales ~ temperature,
family = gaussian(),
data = file_beer_sales_2
)
stancode(simple_lm_brms_3)
standata_brms <- make_standata(
formula = sales ~ temperature,
family = gaussian(),
data = file_beer_sales_2
)
standata_brms
standata_brms <- make_standata(
formula = sales ~ temperature,
family = gaussian(),
data = file_beer_sales_3
)
standata_brms
standata_brms <- make_standata(
formula = sales ~ temperature,
family = gaussian(),
data = file_beer_sales_3
)
standata_brms <- make_standata(
formula = sales ~ temperature,
family = gaussian(),
data = file_beer_sales_2
)
standata_brms
simple_lm_brms_stan <- stan(
file = 'brms-stan-code.stan',
data = standata_brms,
seed = 1
)
simple_lm_brms_stan
plot(simple_lm_brms,
type = 'intervals',
pars = '^b_',
prob = 0.8,
prob_outer = 0.95)
stanplot(simple_lm_brms,
type = 'intervals',
pars = '^b_',
prob = 0.8,
prob_outer = 0.95)
newdata <- data.frame(temperature = 20)
fitted(simple_lm_brms, newdata)
predict(simple_lm_brms, newdata)
mcmc_sample <- as.mcmc(simple_lm_brms, combine_chains = TRUE)
mcmc_sample
eff <- marginal_effects(simple_lm_brms)
plot(eff, points=TRUE)
eff_pre <- marginal_effects(simple_lm_brms, method='predict')
plot(eff_pre, points=TRUE)
eff_ <- marginal_effects(simple_lm_brms, effects='temperature')
plot(eff_)
plot(eff_, plot=TRUE)
plot(eff_, points==TRUE)
plot(eff_, points=TRUE)
library(rstan)
library(bayesplot)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
sales_weather <- read.csv('data/3-6-1-beer-sales-3.csv')
sales_weather
source('fix_mac.R')
fix_Mac()
fix_Mac
ggplot(data = sales_weather, mapping = aes(x=weather, y = sales)) +
geom_violin() +
geom_point(aes(color='weather'))
ggplot(data = sales_weather, mapping = aes(x=weather, y = sales)) +
geom_violin() +
geom_point(aes(color=weather))
anova_brms <- brm(
formula = sales ~ weather,
family = gaussian(),
data = sales_weather,
seed = 1,
prior = c(set_prior('', class='Intercept'),
set_prior('', class='sigma'))
)
anova_brms
eff <- marginal_effects(anova_brms)
plot(eff, points=FALSE)
formula <- formula(sales ~ weather)
library(rstan)
library(bayesplot)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
source('fix_mac.R')
fix_Mac
sales_climate = read.csv('data/3-7-1-beer-sales-4.csv')
sales_climate
summary(sales_climate)
ggplot(data=sales_climate, mapping = aes(x = temperature, y = sales)) +
geom_point(aes(color = weather))
lm_brms <- brm(
formula = sales ~ weather + temperature,
family = gaussian(),
data = sales_climate,
seed = 1,
prior = c(set_prior('', class = 'Intercept'),
set_prior('', class = 'sigma'))
)
lm_brms
eff <- marginal_effects(lm_brms, effects = 'temperature:weather')
plot(eff, points=TRUE)
formula_lm <- formula(sales ~ weather + temperature)
design_mat <- model.matirix(formula_lm, sales_climate)
design_mat <- model.matrix(formula_lm, sales_climate)
design_mat
library(rstan)
library(bayesplot)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
source('fix_mac.R')
fix_Mac
fish_num_climate <- read.csv('data/3-8-1-fish-num-1.csv')
fish_num_climate
summary(fish_num_climate)
ggplot(data = fish_num_climate, mapping = aes(x = temperature, y = fish_num)) +
geom_point(aes(color = weather))
glm_pois_brms <- brm(
formula = fish_num ~ weather + temperature,
family = poisson(),
data = fish_num_climate,
seed = 1,
prior = c(set_prior('', class = 'Intercept'))
)
glm_pois_brms
plot(glm_pois_brms)
eff <- marginal_effects(glm_pois_brms, effects = 'temperature:weather')
plot(eff, points=TRUE)
set.seed(1)
eff_pred <- marginal_effects(glm_pois_brms,
method = 'predict',
effects = 'temperature:weather',
probs = c(0.005, 0.995))
plot(eff_pred, points=TRUE)
design_mat
formula_pois <- formula(fish_num ~ weather + temperature)
design_mat <- model.matrix(formula_pois, fish_num_climate)
design_mat
data_list <- list(
N = nrow(fish_num_climate),
K = 2,
Y = fish_num_climate$fish_num,
X = design_mat
)
result_stan <- stan(
file = 'glm-pois-design-matrix.stan',
data = data_list,
seed= 1
)
rstan:::rstudio_stanc("glm-pois-design-matrix.stan")
germination_dat <- read.csv('data/3-9-1-germination.csv')
head(germination_dat)
summary(germination_dat)
ggplot(data = germination_dat, mapping = aes(x = nutrition, y = germination, color=solar)) +
geom_point()
glm_binom_brms <- brm(
germination | trials(size) ~ solar + nutrition,
family = binomial(),
data = germination_dat,
seed = 1,
prior = c(set_prior('', class = 'Intercept'))
)
library(rstan)
library(bayesplot)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
source('fix_mac.R')
fix_Mac
germination_dat <- read.csv('data/3-9-1-germination.csv')
head(germination_dat)
summary(germination_dat)
ggplot(data = germination_dat, mapping = aes(x = nutrition, y = germination, color=solar)) +
geom_point()
glm_binom_brms <- brm(
germination | trials(size) ~ solar + nutrition,
family = binomial(),
data = germination_dat,
seed = 1,
prior = c(set_prior('', class = 'Intercept'))
)
glm_binom_brms <- brm(
germination | trials(size) ~ solar + nutrition,
family = binomial(),
data = germination_dat,
seed = 1,
prior = c(set_prior('', class = 'Intercept'))
)
