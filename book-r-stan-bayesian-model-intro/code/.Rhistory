lwd = 2,
ylim = c(0, 0.26))
lines(kernel_density_4, col=4)
kernel_density_quarter <- density(fish$length, adjust = 0.25)
kernel_density_4 <- density(fish$length, adjust =4)
lines(kernel_density_quarter, col=2)
lines(kernel_density_4, col=4)
lines(kernel_density_4, col=5)
lines(kernel_density_4, col=6)
legend('topleft',
col = c(1, 2, 4),
lwd = 1,
bty = 'n')
legend('topleft',
col = c(1, 2, 4),
lwd = 1,
bty = 'n')
legend('topleft',
col = c(1, 2, 4),
lwd = 1,
bty = 'n',
legend=c('1', '2', '3'))
quantile(fish$length)
plot(birds$feather_length)
plot(birds$body_length,birds$feather_length)
cor(birds$body_length,birds$feather_length)
Nile
acf(
Nile,
type = 'covariance',
plot = TRUE,
leg.max = 5)
acf(
Nile,
type = 'covariance',
plot = F,
leg.max = 5)
library(ggplot2)
fish <- read.csv('data/2-2-1-fish.csv')
ggplot(data = fish, mapping = aes(x = length)) +
geom_histogram(alpha=0.5, bins=20)
ggplot(data = fish, mapping = aes(x = length)) +
geom_density(alpha=1.5)
ggplot(data = fish, mapping = aes(x = length, y = ..density..)) +
geom_histogram(alpha=0.5, bins=20) +
geom_density(size=1.5)
library(gridExtra)
p_hist <- ggplot(data = fish, mapping = aes(x = length)) +
geom_histogram(alpha=0.5, bins=20)
p_density <- ggplot(data = fish, mapping = aes(x = length)) +
geom_density(alpha=1.5)
grid.arrange(p_hist, p_density, nrow=2)
head(iris, 3)
p_box <- ggplot(data = iris, mapping = aes(x = Species, y = Petal.Length)) +
geom_boxplot()
p_violin <- gplot(data = iris, mapping = aes(x = Species, y = Petal.Length)) +
geom_violin()
p_violin <- ggplot(data = iris, mapping = aes(x = Species, y = Petal.Length)) +
geom_violin()
grid.arrange(p_box, p_violin, ncol=2)
ggplot(data=iris, mapping=aes(x=Petal.Width, y= Petal.Length, color=Species )) +
geom_point()
Nile
df <- data.frame(
year = 1871:1970,
Nile = as.numeric(Nile)
)
as.numeric(Nile)
df
ggplot(data=df, mapping=aes(x=year, y=Nile)) +
geom_line()
library(ggfortify)
autoplot(Nile)
ggplot(data=df, mapping=aes(x=year, y=Nile)) +
geom_points()
ggplot(data=df, mapping=aes(x=year, y=Nile)) +
geom_point()
ggplot(data=df, mapping=aes(x=Nile)) +
geom_histogram()
install.packages("rstan",
repos="https://cloud.r-project.org/",
dependencies=TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_1 <- read.csv('data/2-4-1-beer-sales-1.csv')
file_beer_sales_1
data_list <- list(
sales = file_beer_sales_1$sales,
N = nrow(file_beer_sales_1)
)
data_list
mcmc_result <-rstan(
file = 'clacl_mean_variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
library(rstan)
mcmc_result <-rstan(
file = 'clacl_mean_variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
mcmc_result <-stan(
file = 'clacl_mean_variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
mcmc_result <-stan(
file = 'clacl_mean_variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
mcmc_result
mcmc_result <-stan(
file = 'clacl_mean_variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
rstan:::rstudio_stanc("clacl_mean_variance.stan")
rstan:::rstudio_stanc("clacl_mean_variance.stan")
rstan:::rstudio_stanc("clacl_mean_variance.stan")
mcmc_result <-stan(
file = 'clacl_mean_variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
mcmc_result
mcmc_result <-stan(
file = 'clacl_mean_variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
mcmc_result
mcmc_result <-stan(
file = 'clacl_mean_variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
mcmc_result
mcmc_result <-stan(
file = 'clacl_mean_variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
mcmc_result <-stan(
file = 'clacl_mean_variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
data_list
mcmc_result <-rsta::stan(
file = 'clacl_mean_variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
mcmc_result
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_1 <- read.csv('data/2-4-1-beer-sales-1.csv')
file_beer_sales_1
data_list <- list(
sales = file_beer_sales_1$sales,
N = nrow(file_beer_sales_1)
)
data_list
mcmc_result <-rsta::stan(
file = 'clacl_mean_variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
mcmc_result
rstan:::rstudio_stanc("clacl_mean_variance.stan")
library(rstan)
pkgbuild::has_build_tools(debug = TRUE)
install.packages("bayesplot")
install.packages("brms")
install.packages("bayesplot")
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_1 <- read.csv('data/2-4-1-beer-sales-1.csv')
file_beer_sales_1
data_list <- list(
sales = file_beer_sales_1$sales,
N = nrow(file_beer_sales_1)
)
data_list
mcmc_result <-rsta::stan(
file = 'clacl_mean_variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
mcmc_result
install.packages("bayesplot")
install.packages("bayesplot")
install.packages("bayesplot")
mcmc_result <-rstan::stan(
file = 'clacl_mean_variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
mcmc_result <-rstan::stan(
file = 'clacl_mean_variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
mcmc_result
library(rstan)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# データの読み込み ----------------------------------------------------------------
# 分析対象のデータ
file_beer_sales_1 <- read.csv("2-4-1-beer-sales-1.csv")
# データの確認
head(file_beer_sales_1, n = 3)
# Stanに渡すためにデータを整形する ------------------------------------------------------
# サンプルサイズ
sample_size <- nrow(file_beer_sales_1)
sample_size
# listにまとめる
data_list <- list(sales = file_beer_sales_1$sales, N = sample_size)
data_list
# MCMCによるサンプリングの実施 -----------------------------------------------------------------
# 乱数の生成
mcmc_result <- stan(
file = "2-4-1-calc-mean-variance.stan", # stanファイル
data = data_list,                       # 対象データ
seed = 1,                               # 乱数の種
chains = 4,                             # チェーン数
iter = 2000,                            # 乱数生成の繰り返し数
warmup = 1000,                          # バーンイン期間
thin = 1                                # 間引き数(1なら間引き無し)
)
# 結果の表示
print(
mcmc_result,                   # MCMCサンプリングの結果
probs = c(0.025, 0.5, 0.975)   # 中央値と95%信用区間を出力
)
library(rstan)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# データの読み込み ----------------------------------------------------------------
# 分析対象のデータ
file_beer_sales_1 <- read.csv("2-4-1-beer-sales-1.csv")
# データの確認
head(file_beer_sales_1, n = 3)
# Stanに渡すためにデータを整形する ------------------------------------------------------
# サンプルサイズ
sample_size <- nrow(file_beer_sales_1)
sample_size
# listにまとめる
data_list <- list(sales = file_beer_sales_1$sales, N = sample_size)
data_list
# MCMCによるサンプリングの実施 -----------------------------------------------------------------
# 乱数の生成
mcmc_result <- stan(
file = "2-4-1-calc-mean-variance.stan", # stanファイル
data = data_list,                       # 対象データ
seed = 1,                               # 乱数の種
chains = 4,                             # チェーン数
iter = 2000,                            # 乱数生成の繰り返し数
warmup = 1000,                          # バーンイン期間
thin = 1                                # 間引き数(1なら間引き無し)
)
# 結果の表示
print(
mcmc_result,                   # MCMCサンプリングの結果
probs = c(0.025, 0.5, 0.975)   # 中央値と95%信用区間を出力
)
# 乱数の生成
mcmc_result <- stan(
file = "calcl-mean-variance.stan", # stanファイル
data = data_list,                       # 対象データ
seed = 1,                               # 乱数の種
chains = 4,                             # チェーン数
iter = 2000,                            # 乱数生成の繰り返し数
warmup = 1000,                          # バーンイン期間
thin = 1                                # 間引き数(1なら間引き無し)
)
# 結果の表示
print(
mcmc_result,                   # MCMCサンプリングの結果
probs = c(0.025, 0.5, 0.975)   # 中央値と95%信用区間を出力
)
# 乱数の生成
mcmc_result <- stan(
file = "calcl-mean-variance.stan", # stanファイル
data = data_list,                       # 対象データ
seed = 1,                               # 乱数の種
chains = 4,                             # チェーン数
iter = 2000,                            # 乱数生成の繰り返し数
warmup = 1000,                          # バーンイン期間
thin = 1                                # 間引き数(1なら間引き無し)
)
# 乱数の生成
mcmc_result <- stan(
file = "clacl_mean_variance.stan", # stanファイル
data = data_list,                       # 対象データ
seed = 1,                               # 乱数の種
chains = 4,                             # チェーン数
iter = 2000,                            # 乱数生成の繰り返し数
warmup = 1000,                          # バーンイン期間
thin = 1                                # 間引き数(1なら間引き無し)
)
# 結果の表示
print(
mcmc_result,                   # MCMCサンプリングの結果
probs = c(0.025, 0.5, 0.975)   # 中央値と95%信用区間を出力
)
rstan:::rstudio_stanc("clacl_mean_variance.stan")
mcmc_result <-rstan::stan(
file = 'clacl_mean_variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
mcmc_result
traceplot(mcmc_result)
traceplot(mcmc_result)
mcmc_sample <- rstan::extract(mcmc_result, permuted=FALSE)
mcmc_sample
dim(mcmc_sample)
dim(mcmc_sample[0])
mcmc_sample[0]
mcmc_sample[, 'chain:1', 'mu']
mcmc_sample[,, 'mu']
length(mcmc_sample[,, 'mu'])
mu_mcmc_vec <- as.vector(mcmc_sample[, , 'mu'])
median(mu_mcmc_vec)
mean(mu_mcmc_vec)
quantile(mu_mcmc_vec, probs=c(0.025, 0.975))
print(mcmc_result)
library(ggfortify)
autoplot(ts(mcmc_sample[, , 'mu']),
facets = F,
ylab = 'mu')
autoplot(ts(mcmc_sample[, , 'mu']),
facets = TRUE,
ylab = 'mu')
mu_df <- data.frame(
mu_mcmc_sample = mu_mcmc_vec
)
ggplot(data=mu_df, mapping = aes(x=mu_mcmc_sample)) + geom_density(size=1.5)
mcmc_density <- ggplot(data=mu_df, mapping = aes(x=mu_mcmc_sample)) + geom_density(size=1.5)
data_hist <- ggplot(data=file_beer_sales_1, mapping = aes(x=sales)) + geom_histgram()
data_hist <- ggplot(data=file_beer_sales_1, mapping = aes(x=sales)) + geom_histogram()
library(gridExtra)
grid.arrange(mcmc_density, data_hist, ncol=2)
library(bayesplot)
library(bayesplot)
library(bayesplot)
mcmc_hist(mcmc_sample, pars=c('mu', 'sigma'))
mcmc_result
mcmc_trace(mcmc_sample, pars=c('mu', 'sigma'))
mcmc_combo(mcmc_sample, pars=c('mu', 'sigma'))
mcmc_intervals(
mcmc_sample, pars=c('mu', 'sigma'),
probs = 0.8,
prob_outer = 0.95
)
mcmc_intervals(
mcmc_sample, pars=c('mu', 'sigma'),
probs = 0.3,
prob_outer = 0.95
)
mcmc_intervals(
mcmc_sample, pars=c('mu', 'sigma'),
probs = 0.9,
prob_outer = 0.95
)
mcmc_intervals(
mcmc_sample, pars=c('mu', 'sigma'),
probs = 0.9,
prob_outer = 0.95
)
mcmc_areas(
mcmc_sample, pars=c('mu', 'sigma'),
probs = 0.9,
prob_outer = 0.95
)
mcmc_areas(
mcmc_sample, pars=c('mu', 'sigma'),
probs = 0.6,
prob_outer = 0.95
)
mcmc_areas(
mcmc_sample, pars=c('mu', 'sigma'),
probs = 0.6,
prob_outer = 0.99
)
mcmc_acf_bar(mcmc_sample, pars=c('mu', 'sigma'))
animal_num <- read.csv('data/2-5-1-animal-num.csv')
head(animal_num, 4)
hist(animal_num$animal_num)
rstan:::rstudio_stanc("normal-dist.stan")
rstan:::rstudio_stanc("normal-dist.stan")
rstan:::rstudio_stanc("normal-dist.stan")
rstan:::rstudio_stanc("normal-dist.stan")
rstan:::rstudio_stanc("normal-dist.stan")
rstan:::rstudio_stanc("normal-dist.stan")
rstan:::rstudio_stanc("normal-dist.stan")
rstan:::rstudio_stanc("normal-dist.stan")
data_list <- list(animal_num = animal_num$animal_num, N = nrow(animal_num))
mcmc_normal <- stan(
file = 'normal-dist.stan',
data = data_list,
seed = 1
)
mcmc_normal
rstan:::rstudio_stanc("poisson-dist.stan")
mcmc_poisson <- stan(
file = 'poisson-dist.stan',
data = data_list,
seed = 1
)
mcmc_poisson
mcmc_poisson
y_rep <- rstan::extract(mcmc_normal)
y_rep <- rstan::extract(mcmc_normal)$pred
y_rep_normal <- rstan::extract(mcmc_normal)$pred
y_rep_poisson <- rstan::extract(mcmc_poisson)$pred
dim(y_rep_poisson)
y_rep_normal
y_rep_poisson
ppc_hist(y = animal_num$animal_num, yrep=y_rep_normal[1:5])
ppc_hist(y = animal_num$animal_num, yrep=y_rep_normal[1:5, ])
library(bayesplot)
ppc_hist(y = animal_num$animal_num, yrep=y_rep_normal[1:5, ])
ppc_hist(y = animal_num$animal_num, yrep=y_rep_normal[1:5, ])
hist(y_rep_normal[1,])
y_rep_normal
ppc_hist()
ppc_hist(y = animal_num$animal_num, yrep=y_rep_normal[1:5, ])
ppc_hist(y = animal_num$animal_num, yrep=y_rep_normal[1:5, ])
ppc_hist(y = animal_num$animal_num, yrep=y_rep_normal[1:5, ])
hist(y_rep_normal[1,])
hist(animal_num$animal_num)
hist(y_rep_poissonl[1,])
hist(y_rep_poissonl[1,])
ppc_hist(y = animal_num$animal_num, yrep=y_rep_normal[1:5, ])
ppc_hist(y = animal_num$animal_num, yrep=y_rep_normal[1:5, ])
hist(y_rep_poissonl[1,])
