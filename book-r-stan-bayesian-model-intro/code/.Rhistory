data = data_list_ab,
seed = 1
)
print(mcmc_result_6, probs=c(0.025, 0.5, 0.975))
mcmc_result_6
data_ist
data_ist
data_ist
data_ist
data_ist_ab
sales_a
data_ist_ab
data_list_ab
data_list_ab
mcmc_result_6 <- stan(
file = 'difference-mean.stan',
data = data_list_ab,
seed = 1
)
print(mcmc_result_6, probs=c(0.025, 0.5, 0.975))
mcmc_result_6
sales_a
data_list_ab
mcmc_result_6 <- stan(
file = 'difference-mean.stan',
data = data_list_ab,
seed = 1
)
print(mcmc_result_6, probs=c(0.025, 0.5, 0.975))
mcmc_result_6
rstan:::rstudio_stanc("difference-mean.stan")
mcmc_result_6 <- stan(
file = 'difference-mean.stan',
data = data_list_ab,
seed = 1
)
print(mcmc_result_6, probs=c(0.025, 0.5, 0.975))
mcmc_result_6
mcmc_sample <- rstan::extract(mcmc_result_6, permuted = FALSE)
mcmc_dens(mcmc_sample, pars='diff')
library(rstan)
library(bayesplot)
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_2 <- read.csv('../book-data/3-2-1-beer-sales-2.csv')
head(file_beer_sales_2, n=3)
sample_size <- nrow(file_beer_sales_2)
sample_size
ggplot(file_beer_sales_2, aes(x=temperature, y=sales)) + geom_point() + labs(titl='scatter plot')
data_list <- list(
N = sample_list,
sales = file_beer_sales_2$sales,
temperature = file_beer_sales_2$temperature
)
data_list <- list(
N = sample_size,
sales = file_beer_sales_2$sales,
temperature = file_beer_sales_2$temperature
)
mcmc_result <- stan(
file = 'simple-lm.stan',
data = data_list,
seed = 1
)
print(mcmc_result, probs = c(0.0025, 0.5, 0.975))
mcmc_sample <- rstan::extract(mcmc_result, permuted = FALSE)
mcmc_combo(mcmc_sample, pars=c('Intercept', 'beta', 'sigma'))
mcmc_combo(mcmc_sample, pars=c('Intercept', 'beta', 'sigma'))
library(rstan)
library(bayesplot)
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_2 <- read.csv('../book-data/3-2-1-beer-sales-2.csv')
sample_size <- nrow(file_beer_sales_2)
sample_size
temperature_pred < 11:30
temperature_pred
temperature_pred <- 11:30
temperature_pred
data_list
data_list_pred
data_list_pred <- list(
N = sample_size,
sales = file_beer_sales_2$sales,
tem
)
data_list_pred <- list(
N = sample_size,
sales = file_beer_sales_2$sales,
N_pred = length(temperature_pred),
temperature_pred = temperature_pred
)
data_list_pred
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list,
seed = 1
)
print(mcmc_result_pred)
temeprature_pred
data_list_pred <- list(
N = sample_size,
sales = file_beer_sales_2$sales,
N_pred = length(temperature_pred),
temperature_pred = temperature_pred
)
data_list_pred
temperature_pred
data_list_pred
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list,
seed = 1
)
print(mcmc_result_pred)
print(mcmc_result_pred)
print(mcmc_result_pred)
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list,
seed = 1
)
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list,
seed = 1
)
print(mcmc_result_pred)
library(rstan)
library(bayesplot)
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_2 <- read.csv('../book-data/3-2-1-beer-sales-2.csv')
sample_size <- nrow(file_beer_sales_2)
sample_size
temperature_pred <- 11:30
temperature_pred
data_list_pred <- list(
N = sample_size,
sales = file_beer_sales_2$sales,
temperature = file_beer_sales_2$temperature,
N_pred = length(temperature_pred),
temperature_pred = temperature_pred
)
data_list_pred
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list,
seed = 1
)
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list_pred,
seed = 1
)
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list_pred,
seed = 1
)
print(mcmc_result_pred)
mcmc_result_pred <- stan(
file = 'simple-lm-pred.stan',
data = data_list_pred,
seed = 1
)
install.packages("brms")
install.packages("KFAS")
# パッケージの読み込み
library(rstan)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# 分析対象のデータ
file_beer_sales_2 <- read.csv("../book-data/3-2-1-beer-sales-2.csv")
# brmsによる単回帰モデルの推定 -------------------------------------------------------------------
# 単回帰モデルを作る
simple_lm_brms <- brm(
formula = sales ~ temperature,         # modelの構造を指定
family = gaussian(link = "identity"),  # 正規分布を使う
data = file_beer_sales_2,              # データ
seed = 1                               # 乱数の種
)
simple_lm_brms
simple_lm_brms
Xcode
# パッケージの読み込み
library(rstan)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# 分析対象のデータ
file_beer_sales_2 <- read.csv("../book-data/3-2-1-beer-sales-2.csv")
# brmsによる単回帰モデルの推定 -------------------------------------------------------------------
# 単回帰モデルを作る
simple_lm_brms <- brm(
formula = sales ~ temperature,         # modelの構造を指定
family = gaussian(link = "identity"),  # 正規分布を使う
data = file_beer_sales_2,              # データ
seed = 1                               # 乱数の種
)
simple_lm_brms
library(rstan)
library(brms)
library(bridgesampling)
library(tidyverse)
library(magrittr)
#パラメータの真値
alpha <- 2
beta <- c(3,4,0)
#乱数でデータ生成
set.seed(123)
x1=rnorm(100,0,1)
x2=rnorm(100,0,1)
x3 = rnorm(100,0,1)
y <- alpha + beta[1]*x1 + beta[2]*x2 + beta[3]*x3 + rnorm(100,0,10)
dat <- data.frame(y=y,x1=x1,x2=x2,x3=x3)
install.packages('bridgesampling')
install.packages("bridgesampling")
install.packages("bridgesampling")
install.packages("bridgesampling")
install.packages("bridgesampling")
install.packages("bridgesampling")
install.packages("bridgesampling")
install.packages("bridgesampling")
install.packages("bridgesampling")
install.packages("bridgesampling")
library(rstan)
library(brms)
library(bridgesampling)
library(tidyverse)
library(magrittr)
library(magrittr)
#パラメータの真値
alpha <- 2
beta <- c(3,4,0)
#乱数でデータ生成
set.seed(123)
x1=rnorm(100,0,1)
x2=rnorm(100,0,1)
x3 = rnorm(100,0,1)
y <- alpha + beta[1]*x1 + beta[2]*x2 + beta[3]*x3 + rnorm(100,0,10)
dat <- data.frame(y=y,x1=x1,x2=x2,x3=x3)
dat
result0 <- brm(y ~ x1+x2+x3,data=dat,save_all_pars = TRUE,iter=10000)
result1 <- brm(y ~ x1+x2,data=dat,save_all_pars = TRUE,iter=10000)
# 複雑なformulaはbf関数で作成
simple_lm_formula <- bf(sales ~ temperature)
# simple_lm_brmsと結果は同じ
simple_lm_brms_2 <- brm(
formula = simple_lm_formula, # bf関数で作成済みのformulaを指定
family = gaussian(),      # 正規分布を使う(リンク関数省略)
data = file_beer_sales_2, # データ
seed = 1,                 # 乱数の種
chains = 4,               # チェーン数
iter = 2000,              # 乱数生成の繰り返し数
warmup = 1000,            # バーンイン期間
thin = 1                  # 間引き数(1なら間引き無し)
)
simple_lm_formula <- bf(sales ~ temperature)
source('~/study/book-r-stan-bayesian-model-intro/code/ch3_5.R', echo=TRUE)
# パッケージの読み込み
library(rstan)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# 分析対象のデータ
file_beer_sales_2 <- read.csv("../book-data/3-2-1-beer-sales-2.csv")
simple_lm_formula <- bf(sales ~ temperature)
# simple_lm_brmsと結果は同じ
simple_lm_brms_2 <- brm(
formula = simple_lm_formula, # bf関数で作成済みのformulaを指定
family = gaussian(),      # 正規分布を使う(リンク関数省略)
data = file_beer_sales_2, # データ
seed = 1,                 # 乱数の種
chains = 4,               # チェーン数
iter = 2000,              # 乱数生成の繰り返し数
warmup = 1000,            # バーンイン期間
thin = 1                  # 間引き数(1なら間引き無し)
)
simple_lm_formula <- bf(sales ~ temperature)
# パッケージの読み込み
library(rstan)
library(brms)
bf
# 複雑なformulaはbf関数で作成
simple_lm_formula <- bf(sales ~ temperature, file_beer_sales_2)
simple_lm_formula <- bf(sales ~ temperature)
# 複雑なformulaはbf関数で作成
simple_lm_formula <- brms::bf(sales ~ temperature)
# simple_lm_brmsと結果は同じ
simple_lm_brms_2 <- brm(
formula = simple_lm_formula, # bf関数で作成済みのformulaを指定
family = gaussian(),      # 正規分布を使う(リンク関数省略)
data = file_beer_sales_2, # データ
seed = 1,                 # 乱数の種
chains = 4,               # チェーン数
iter = 2000,              # 乱数生成の繰り返し数
warmup = 1000,            # バーンイン期間
thin = 1                  # 間引き数(1なら間引き無し)
)
# 事前分布を無情報事前分布にする
simple_lm_brms_3 <- brm(
formula = sales ~ temperature,
family = gaussian(),
data = file_beer_sales_2,
seed = 1,
prior = c(set_prior("", class = "Intercept"),
set_prior("", class = "sigma"))
)
# 単回帰モデルを作る
simple_lm_brms <- brms::brm(
formula = sales ~ temperature,         # modelの構造を指定
family = gaussian(link = "identity"),  # 正規分布を使う
data = file_beer_sales_2,              # データ
seed = 1                               # 乱数の種
)
simple_lm_brms
# rstanに渡すデータを作る
standata_brms <- make_standata(
formula = sales ~ temperature,
family = gaussian(),
data = file_beer_sales_2
)
standata_brms
simple_lm_brms_stan <- stan(
file= 'brms-stan-code.stan',
data = standata_brms,
seed = 1
)
simple_lm_brms_stan
# パッケージの読み込み
library(rstan)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_3 <- read.csv("../book-data/3-6-1-beer-sales-3.csv")
sales_weather <- read.csv("../book-data/3-6-1-beer-sales-3.csv")
head(sales_weather, n=5)
summary(sales_weather)
ggpplot(data=sales_weather, mapping=aes(x = weather, y = sales)) + geom_violin() + geom_point(aes(color=weather))
library(ggplot2)
ggpplot(data=sales_weather, mapping=aes(x = weather, y = sales)) + geom_violin() + geom_point(aes(color=weather))
ggplot(data=sales_weather, mapping=aes(x = weather, y = sales)) + geom_violin() + geom_point(aes(color=weather))
# 分散分析モデルを作る
anova_brms <- brm(
formula = sales ~ weather,  # modelの構造を指定
family = gaussian(),        # 正規分布を使う
data = sales_weather,       # データ
seed = 1,                   # 乱数の種
prior = c(set_prior("", class = "Intercept"),
set_prior("", class = "sigma"))
)
# MCMCの結果の確認
anova_brms
formula_anova <- formula(sales ~ weather)
design_mat <- model.matrix(formula_anova, sales_weather)
design_mat
data_list <- list(
N = nrow(sales_weather),
K = 3,
Y = sales_weather$sales,
X = design_mat
)
anova_stan <- stan(
file = 'brms-stan-code.stan',
data = data_list,
seed = 1
)
anova_stan <- stan(
file = 'brms-stan-code.stan',
data = data_list,
seed = 1
)
# デザイン行列の作成
formula_anova <- formula(sales ~ weather)
design_mat <- model.matrix(formula_anova, sales_weather)
# stanに渡すlistの作成
data_list <- list(
N = nrow(sales_weather), # サンプルサイズ
K = 3,                   # デザイン行列の列数
Y = sales_weather$sales, # 応答変数
X = design_mat           # デザイン行列
)
# Stanに渡すデータの表示
data_list
anova_stan <- stan(
file = 'brms-stan-code.stan',
data = data_list,
seed = 1
)
anova_stan <- stan(
file = 'lm-design-matrix.stan'
data = data_list,
seed = 1
)
anova_stan <- stan(
file = 'lm-design-matrix.stan',
data = data_list,
seed = 1
)
anova_stan
anova_stan <- stan(
file = 'lm-design-matrix.stan',
data = data_list,
seed = 1
)
anova_stan
# パッケージの読み込み
library(rstan)
library(ggplot2)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
sales_climate <- read.csv("../book-data/3-7-1-beer-sales-4.csv")
summary(sales_climate)
ggplot(data=sales_climate, mapping=aes(x = temperature, y = sales)) + geom_point() + geom_point(aes(color=weather))
# 正規線形モデルを作る
lm_brms <- brm(
formula = sales ~ weather + temperature,  # modelの構造を指定
family = gaussian(),                      # 正規分布を使う
data = sales_climate,                     # データ
seed = 1,                                 # 乱数の種
prior = c(set_prior("", class = "Intercept"),
set_prior("", class = "sigma"))
)
# パッケージの読み込み
library(rstan)
library(ggplot2)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fish_num_climate <- read.csv("../book-data/3-8-1-fish-num-1.csv")
summary(fish_num_climate)
ggplot(data=fish_num_climate, mapping=aes(x = temperature, y = fish_num)) + geom_point(aes(color=weather))
# ポアソン回帰モデルを作る
glm_pois_brms <- brm(
formula = fish_num ~ weather + temperature,  # modelの構造を指定
family = poisson(),                          # ポアソン分布を使う
data = fish_num_climate,                     # データ
seed = 1,                                    # 乱数の種
prior = c(set_prior("", class = "Intercept"))# 無情報事前分布にする
)
# MCMCの結果の確認
glm_pois_brms
# MCMCの結果の確認
glm_pois_brms
eff <- marginal_effects(glm_pois_brms, effects='temperature:weather')
plot(eff, points=TRUE)
set.seed(1)
eff_pred <- marginal_effects(glm_pois_brms, method='predict', effect='temperature:weather' , probs=c(0.005, 0.995))
plot(eff_pred)
plot(eff_pred, points=TRUE)
germination_dat <- read.csv("../book-data/3-9-1-germination.csv")
# パッケージの読み込み
library(rstan)
library(ggplot2)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
germination_dat <- read.csv("../book-data/3-9-1-germination.csv")
summary(germination_dat)
head(germination_dat, n=5)
ggplot(data=germination_dat, mapping=aes(x=nutrition, y=germination, color=solar)) + geom_point()
glm_binom_brms <- brm(
germination | trials(size) ~ solar + nutrition, # modelの構造を指定
family = binomial(),                         # 二項分布を使う
data = germination_dat,                      # データ
seed = 1,                                    # 乱数の種
prior = c(set_prior("", class = "Intercept"))# 無情報事前分布にする
)
glm_binom_brms
germination_dat
trials(size)
glm_binom_brms
# 説明変数を作る
newdata_1 <- data.frame(
solar = c("shade", "sunshine", "sunshine"),
nutrition = c(2,2,3),
size = c(10,10,10)
)
newdata_1
linear_fit <- fitted(glm_binom_brms, newdata_1, scale='linear')[,1]
fit <- 1 / (1 + exp(-linear_fit))
fit
# オッズを計算
odds_1 <- fit[1] / (1 - fit[1])
odds_2 <- fit[2] / (1 - fit[2])
odds_3 <- fit[3] / (1 - fit[3])
coef <- fixef(glm_binom_brms)[,1]
coef
glm_binom_brms
glm_binom_brms[,1]
fixef(glm_binom_brms)
eff <- marginal_effects(glm_binom_brms, effects='nutrition:solar')
plot(eff, points=TRUE)
glm_binom_brms <- brm(
germination | trials(size) ~ solar + nutrition, # modelの構造を指定
family = binomial(),                         # 二項分布を使う
data = germination_dat,                      # データ
seed = 1,                                    # 乱数の種
prior = c(set_prior("", class = "Intercept"))# 無情報事前分布にする
)
eff <- marginal_effects(glm_binom_brms, effects='nutrition:solar')
plot(eff, points=TRUE)
