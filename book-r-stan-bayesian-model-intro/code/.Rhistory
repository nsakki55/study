)
anova_stan
anova_stan <- stan(
file = 'lm-design-matrix.stan',
data = data_list,
seed = 1
)
anova_stan
# パッケージの読み込み
library(rstan)
library(ggplot2)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
sales_climate <- read.csv("../book-data/3-7-1-beer-sales-4.csv")
summary(sales_climate)
ggplot(data=sales_climate, mapping=aes(x = temperature, y = sales)) + geom_point() + geom_point(aes(color=weather))
# 正規線形モデルを作る
lm_brms <- brm(
formula = sales ~ weather + temperature,  # modelの構造を指定
family = gaussian(),                      # 正規分布を使う
data = sales_climate,                     # データ
seed = 1,                                 # 乱数の種
prior = c(set_prior("", class = "Intercept"),
set_prior("", class = "sigma"))
)
# パッケージの読み込み
library(rstan)
library(ggplot2)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fish_num_climate <- read.csv("../book-data/3-8-1-fish-num-1.csv")
summary(fish_num_climate)
ggplot(data=fish_num_climate, mapping=aes(x = temperature, y = fish_num)) + geom_point(aes(color=weather))
# ポアソン回帰モデルを作る
glm_pois_brms <- brm(
formula = fish_num ~ weather + temperature,  # modelの構造を指定
family = poisson(),                          # ポアソン分布を使う
data = fish_num_climate,                     # データ
seed = 1,                                    # 乱数の種
prior = c(set_prior("", class = "Intercept"))# 無情報事前分布にする
)
# MCMCの結果の確認
glm_pois_brms
# MCMCの結果の確認
glm_pois_brms
eff <- marginal_effects(glm_pois_brms, effects='temperature:weather')
plot(eff, points=TRUE)
set.seed(1)
eff_pred <- marginal_effects(glm_pois_brms, method='predict', effect='temperature:weather' , probs=c(0.005, 0.995))
plot(eff_pred)
plot(eff_pred, points=TRUE)
germination_dat <- read.csv("../book-data/3-9-1-germination.csv")
# パッケージの読み込み
library(rstan)
library(ggplot2)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
germination_dat <- read.csv("../book-data/3-9-1-germination.csv")
summary(germination_dat)
head(germination_dat, n=5)
ggplot(data=germination_dat, mapping=aes(x=nutrition, y=germination, color=solar)) + geom_point()
glm_binom_brms <- brm(
germination | trials(size) ~ solar + nutrition, # modelの構造を指定
family = binomial(),                         # 二項分布を使う
data = germination_dat,                      # データ
seed = 1,                                    # 乱数の種
prior = c(set_prior("", class = "Intercept"))# 無情報事前分布にする
)
glm_binom_brms
germination_dat
trials(size)
glm_binom_brms
# 説明変数を作る
newdata_1 <- data.frame(
solar = c("shade", "sunshine", "sunshine"),
nutrition = c(2,2,3),
size = c(10,10,10)
)
newdata_1
linear_fit <- fitted(glm_binom_brms, newdata_1, scale='linear')[,1]
fit <- 1 / (1 + exp(-linear_fit))
fit
# オッズを計算
odds_1 <- fit[1] / (1 - fit[1])
odds_2 <- fit[2] / (1 - fit[2])
odds_3 <- fit[3] / (1 - fit[3])
coef <- fixef(glm_binom_brms)[,1]
coef
glm_binom_brms
glm_binom_brms[,1]
fixef(glm_binom_brms)
eff <- marginal_effects(glm_binom_brms, effects='nutrition:solar')
plot(eff, points=TRUE)
glm_binom_brms <- brm(
germination | trials(size) ~ solar + nutrition, # modelの構造を指定
family = binomial(),                         # 二項分布を使う
data = germination_dat,                      # データ
seed = 1,                                    # 乱数の種
prior = c(set_prior("", class = "Intercept"))# 無情報事前分布にする
)
eff <- marginal_effects(glm_binom_brms, effects='nutrition:solar')
plot(eff, points=TRUE)
# パッケージの読み込み
library(rstan)
library(ggplot2)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
interaction_1 <- read.csv("../book-data/3-10-1-interaction-1.csv")
head(interaction_1, n=5)
summary(interaction_1)
interaction_brms <- brms:brm(
formula = sales ~ publicity * bargen,
family = gaussian(link='identity'),
data = interaction_1,
seed = 1,
prior = c(set_prior('', class='Intercept'),
set_prior('', class='sigma'))
)
interaction_brms <- brms::brm(
formula = sales ~ publicity * bargen,
family = gaussian(link='identity'),
data = interaction_1,
seed = 1,
prior = c(set_prior('', class='Intercept'),
set_prior('', class='sigma'))
)
interaction_brms
# 分析対象のデータ
interaction_2 <- read.csv("3-10-2-interaction-2.csv")
head(interaction_2, n = 3)
# 分析対象のデータ
interaction_2 <- read.csv("../book-data/3-10-2-interaction-2.csv")
head(interaction_2, n = 3)
head(interaction_2, n = 3)
summary(interaction_2)
interaction_brms_2 <- brm(
formula = sales ~ publicity * temperature,
family = gaussian(link = "identity"),
data = interaction_2,
seed = 1,
prior = c(set_prior("", class = "Intercept"),
set_prior("", class = "sigma"))
)
interaction_brms_2
interaction_3 <- read.csv("3-10-3-interaction-3.csv")
head(interaction_3, n = 3)
interaction_3 <- read.csv("../book-data/3-10-3-interaction-3.csv")
head(interaction_3, n = 3)
ggplot(data=interaction_3, mapping=aes(x=product, y=sales, color=factor(clerk))) + geom_point()
interaction_brms_3 <- brm(
formula = sales ~ product * clerk,
family = gaussian(link = "identity"),
data = interaction_3,
seed = 1,
prior = c(set_prior("", class = "Intercept"),
set_prior("", class = "sigma"))
)
int_conditions <- list(
clerk = setNames(1:9, paste('clerk=', 1:9, sep=''))
)
int_conditions
# パッケージの読み込み
library(rstan)
library(bayesplot)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fish_num_climate_2 <- read.csv("../book-data/4-1-1-fish-num-2.csv")
head(fish_num_climate_2, n=4)
glm_pois_brms <- brm(
formula = fish_num ~ weather + temperature,
family = poisson(),
data = fish_num_climate_2,
seed = 1,
prior = c(set_prior('', class='Intercept'))
)
set.seed(1)
eff_glm_pre <- marginal_effects(
glm_pois_brms,
method = 'predict',
effects = 'temperature:weather',
probs = c(0.005, 0.995)
)
plot(eff_glm_pre, points=T)
formula_pois <- formula(fish_num ~ weather + temperature)
design_mat <- model.matrix(formula_pois, fish_num_climate_2)
sunny_dummy <- as.numeric(design_mat[, 'weathersunny'])
sunny_dummy
design_mat
data_list_1 <- list(
N = nrow(fish_num_climate_2),
fish_num = fish_num_climate_2$fish_num,
temp = fish_num_climate_2$temperature,
sunny = sunny_dummy
)
data_list_1
glmm_pois_stan <- stan(
file = 'glmm-pois.stan',
data = data_list_1,
seed = 1
)
glmm_pois_stan
# パッケージの読み込み
library(rstan)
library(bayesplot)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
glmm_pois_stan <- stan(
file = 'glmm-pois.stan',
data = data_list_1,
seed = 1
)
glmm_pois_stan
glmm_pois_stan <- stan(
file = 'glmm-pois.stan',
data = data_list_1,
seed = 1
)
glmm_pois_stan
mcmc_rhat(rhat(glmm_pois_stan))
mcmc_sample <- rstan::extract(glmm_pois_stan, permuted = FALSE)
mcmc_combo(
mcmc_sample,
pars = c("Intercept", "b_sunny", "b_temp", "sigma_r", "lp__"))
print(glmm_pois_stan,
pars = c("Intercept", "b_sunny", "b_temp", "sigma_r"),
probs = c(0.025, 0.5, 0.975))
glmm_pois_brms <- brm(
formula = fish_num ~ weather + temperature + (1|id),
family = poisson(),
data = fish_num_climate_2,
seed = 1,
prior = c(set_prior('', class='Intercept'),
set_prior('', class='sd'))
)
glmm_pois_brms
# パッケージの読み込み
library(rstan)
library(bayesplot)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fish_num_climate_3 <- read.csv("../book-data/4-2-1-fish-num-3.csv")
head(fish_num_climate_3, n=4)
summary(fish_num_climate_3)
glmm_pois_brms <- brm(
formula = fish_num ~ weather + temperature + (1|human),
family = poisson(),
data = fish_num_climate_3,
seed = 1,
prior = c(set_prior('', class='Intercept'),
set_prior('', class='sd'))
)
glmm_pois_brms_human <- brm(
formula = fish_num ~ weather + temperature + (1|human),
family = poisson(),
data = fish_num_climate_3,
seed = 1,
prior = c(set_prior('', class='Intercept'),
set_prior('', class='sd'))
)
plot(glmm_pois_brms_human)
stanplot(glmm_pois_brms_human, type='stan')
stanplot(glmm_pois_brms_human, type='rhat')
glmm_pois_brms_human
ranef(glmm_pois_brms_human)
conditions <- data.frame(
human = c("A","B","C","D","E","F","G","H","I","J"))
conditions
eff_glmm_human <- marginal_effects(
glmm_pois_brms_human,
effects = 'temperature:weather',
re_formula = NULL,
conditions = conditions
)
eff_glmm_human <- marginal_effects(
glmm_pois_brms_human,
effects = 'temperature:weather',
re_formula = NULL,
conditions = conditions
)
eff_glmm_human <- marginal_effects(
glmm_pois_brms_human,
effects = "temperature:weather",
re_formula = NULL,
conditions = conditions)
eff_glmm_human <- conditional_effects(
glmm_pois_brms_human,
effects = "temperature:weather",
re_formula = NULL,
conditions = conditions)
plot(eff_glmm_human, points=TRUE)
# パッケージの読み込み
library(rstan)
library(bayesplot)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fish_num_climate_4 <- read.csv("../book-data/4-3-1-fish-num-4.csv")
head(fish_num_climate_4)
summary(fish_num_climate_4)
glmm_pois_brms_interaction <- brm(
formula = fish_num ~ temperature * human,
family = poisson(),
data = fish_num_climate_4,
seed = 1,
prior = c(set_prior('', class='Intercept'))
)
conditions <- data.frame(
human = c("A","B","C","D","E","F","G","H","I","J"))
eff_1 <- conditional_effects(
glmm_pois_brms_interaction,
effects = "temperature",
conditions = conditions)
plot(eff_1)
plot(eff_1, points=TRUE)
glmm_pois_brms_keisu <- brm(
formula = fish_num ~ temperature + (temperature||human),
family = poisson(),
data = fish_num_climate_4,
seed = 1,
iter = 6000,
warmup = 5000,
control = list(adapt_delta = 0.97, max_treedepth = 15)
)
glmm_pois_brms_keisu
eff_2 <- conditional_effects(
glmm_pois_brms_keisu,
re_formula = NULL,
effects = "temperature",
conditions = conditions)
plot(eff_2, points=TRUE)
wn <- rnorm(n=100, mean=0, sd=1)
set.seed(1)
wn <- rnorm(n=100, mean=0, sd=1)
cumsum(c(1, 3, 2))
rw <- cumsum(wn)
p_wn_1 <- autoplot(ts(wn), main='while noise')
p_rw_1 <- autoplot(ts(rw), main='random walk')
p_wn_1 <- autoplot(ts(wn), main='while noise')
ts(wn)
p_wn_1 <- autoplot(ts(wn), main = "ホワイトノイズ")
p_rw_1 <- autoplot(ts(rw), main = "ランダムウォーク")
# パッケージの読み込み
library(rstan)
library(bayesplot)
library(ggfortify)
library(gridExtra)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(1)
wn <- rnorm(n=100, mean=0, sd=1)
cumsum(c(1, 3, 2))
rw <- cumsum(wn)
p_wn_1 <- autoplot(ts(wn), main = "ホワイトノイズ")
p_rw_1 <- autoplot(ts(rw), main = "ランダムウォーク")
grid.arrange(p_wn_1, p_rw_1)
wn_mat <- matrix(nrow=100, ncol=20)
rw_mat <- matrix(nrow=100, ncol=20)
set.seed(1)
for (i in 1:20){
wn <- rnorm(n=100, mean=0, sd=1)
wn_mat[, 1] <- wn
rw_mat[, i] <- cumsum(wn)
}
p_wn_2 <- autoplot(ts(wn_mat), facets=F, main='white noise')p_wn_2 <- autoplot(ts(wn_mat), facets=F, main='white noise')
p_wn_2 <- autoplot(ts(wn_mat), facets=F, main='white noise')
p_rw_2 <- autoplot(ts(rw_mat), facets=F, main='random walk')
p_wn_2 <- autoplot(ts(wn_mat), facets=F, main='white noise') + theme(legend.position = 'none')
p_rw_2 <- autoplot(ts(rw_mat), facets=F, main='random walk') + theme(legend.position = 'none')
grid.arrange(p_wn_2, p_rw_2)
sales_df <- read.csv("5-2-1-sales-ts-1.csv")
sales_df <- read.csv("../book-data/5-2-1-sales-ts-1.csv")
head(sales_df)
POSIXct_time <- as.POSIXct("1970-01-01 00:00:05", tz="UTC")
as.numeric(POSIXct_time)
data_list <- list(
y = sales_df$sales,
T = nrow(sales_df)
)
local_level_stan <- stan(
file = 'local-level.stan',
data = data_list,
seed = 1
)
local_level_stan
local_level_stan <- stan(
file = 'local-level.stan',
data = data_list,
seed = 1
)
source('~/study/book-r-stan-bayesian-model-intro/code/ch5_2.R', echo=TRUE)
# パッケージの読み込み
library(rstan)
library(bayesplot)
library(ggfortify)
library(gridExtra)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# パッケージの読み込み
library(rstan)
library(bayesplot)
library(ggfortify)
library(gridExtra)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
local_level_stan <- stan(
file = 'local-level.stan',
data = data_list,
seed = 1
)
local_level_stan
library(parallel)
library(parallel)
local_level_stan <- stan(
file = 'local-level.stan',
data = data_list,
seed = 1
)
cluster <- makePSOCKcluster("localhost")
parSapply(cluster, 1:5, sqrt)
stopCluster(cluster)
local_level_stan <- stan(
file = 'local-level.stan',
data = data_list,
seed = 1
)
sales_df$date <- as.POSIXct(sales_df$date)
sales_df$date <- as.POSIXct(sales_df$date)
sales_df$date <- as.POSIXct(sales_df$date)
data_list <- list(
y = sales_df$sales,
T = nrow(sales_df)
)
local_level_stan <- stan(
file = 'local-level.stan',
data = data_list,
seed = 1
)
local_level_stan
# データの読み込み
sales_df <- read.csv("../book-data/5-2-1-sales-ts-1.csv")
# 日付をPOSIXct形式にする
sales_df$date <- as.POSIXct(sales_df$date)
# データの先頭行を表示
head(sales_df, n = 3)
# POSIXctの補足
POSIXct_time <- as.POSIXct("1970-01-01 00:00:05", tz="UTC")
as.numeric(POSIXct_time)
# ローカルレベルモデルの推定 -------------------------------------------------------------
# データの準備
data_list <- list(
y = sales_df$sales,
T = nrow(sales_df)
)
# モデルの推定
local_level_stan <- stan(
file = "5-2-1-local-level.stan",
data = data_list,
seed = 1
)
# 収束の確認
mcmc_rhat(rhat(local_level_stan)
# データの読み込み
sales_df <- read.csv("../book-data/5-2-1-sales-ts-1.csv")
# データの読み込み
sales_df <- read.csv("../book-data/5-2-1-sales-ts-1.csv")
# 日付をPOSIXct形式にする
sales_df$date <- as.POSIXct(sales_df$date)
# データの先頭行を表示
head(sales_df, n = 3)
# POSIXctの補足
POSIXct_time <- as.POSIXct("1970-01-01 00:00:05", tz="UTC")
# データの準備
data_list <- list(
y = sales_df$sales,
T = nrow(sales_df)
)
as.numeric(POSIXct_time)
# データの準備
data_list <- list(
y = sales_df$sales,
T = nrow(sales_df)
)
# モデルの推定
local_level_stan <- stan(
file = "5-2-1-local-level.stan",
data = data_list,
seed = 1
)
# モデルの推定
local_level_stan <- stan(
file = "local-level.stan",
data = data_list,
seed = 1
)
