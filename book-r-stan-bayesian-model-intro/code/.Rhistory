head(data_frame, 2)
head(data_frame, n=2)
list_1$chara
list_1[[1]]
ts_1 <- ts(
data = data_frame2,
start = c(2010, 1),
frequency = 12
)
ts_1
data_frame2 <- data.frame(
data = 1:24
)
ts_1 <- ts(
data = data_frame2,
start = c(2010, 1),
frequency = 12
)
ts_1
ts_1 <- ts(
data = data_frame2,
start = c(2010, 2),
frequency = 12
)
ts_1
ts_1 <- ts(
data = data_frame2,
start = c(2010, 1),
frequency = 12
)
ts_1
data_frame2
ts_1
birds <- read.csv('../book-data/2-1-1-birds.csv')
birds
head(birds, n=3)
rnorm(n=1, mean=0, sd=1)
rnorm(n=1, mean=0, sd=1)
rnorm(n=1, mean=0, sd=1)
rnorm(n=1, mean=0, sd=1)
rnorm(n=1, mean=0, sd=1)
rnorm(n=1, mean=0, sd=1)
rnorm(n=1, mean=0, sd=1)
rnorm(n=1, mean=0, sd=1)
rnorm(n=1, mean=0, sd=1)
rnorm(n=1, mean=0, sd=1)
set.seed(1)
rnorm(n=1, mean=0, sd=1)
rnorm(n=1, mean=0, sd=1)
set.seed(1)
rnorm(n=1, mean=0, sd=1)
rnorm(n=1, mean=0, sd=1)
set.seed(1)
rnorm(n=1, mean=0, sd=1)
rnorm(n=1, mean=0, sd=1)
set.seed(1)
rnorm(n=1, mean=0, sd=1)
rnorm(n=1, mean=0, sd=1)
set.seed(1)
rnorm(n=1, mean=0, sd=1)
rnorm(n=1, mean=0, sd=1)
for (i in 1:3){
print(i)
}
result_vec_1 <- c(0, 0, 0)
set.seed(1)
for (i in 1:3){
result_vec_1[i] <- rnorm(n=1, mean=0, sd=1)
}
result_vec_1
result_vec_2 <- c(0, 0, 0)
mean_vec <- c(0, 10, -5)
set.seed(1)
for (i in 1:3){
result_vec_2[i] <- rnorm(n=1, mean=mean_vec[i], sd=1)
}
result_vec_2
install.packages('tidyverse')
library(tidyverse)
fish <- read.csv('../book-data/2-2-1-fish.csv')
fish
head(fish, n=2)
hist(fish$lenght)
hist(fish$length)
plot(kernel_density)
kernel_density <- density(fish$length)
plot(kernel_density)
plot(kernel_density,lwd=2, xlab='', ylim = c(0, 0.26), main = 'バンド幅を変える')
plot(kernel_density,lwd=2, xlab='', ylim = c(0, 0.26), main = 'バンド幅を変える')
lines(kernel_density_1, col=2)
lines(kernel_density_1, col=4)
kernel_density_1 <- density(fish$length, adjust=0.25)
kernel_density_2 <- density(fish$length, adjust=4)
plot(kernel_density,lwd=2, xlab='', ylim = c(0, 0.26), main = 'バンド幅を変える')
lines(kernel_density_1, col=2)
lines(kernel_density_2, col=4)
legend('topleft', col = c(1, 2, 4), lwd = 1, bty = 'n', legend = c('標準', '1/4', '4'))
legend('topleft', col = c(1, 2, 4), lwd = 1, legend = c('標準', '1/4', '4'))
legend('topleft', col = c(1, 2, 4), lwd = 1, bty = 'n', legend = c('標準', '1/4', '4'))
legend('topleft', col = c(1, 2, 4), lwd = 1, bty = 'n', legend = c('標準', '1/4', '4'))
legend('topleft', col = c(1, 2, 4), lwd = 1, bty = 'n', legend = c('標準', '1/4', '4'))
kernel_density_1 <- density(fish$length, adjust=0.25)
kernel_density_2 <- density(fish$length, adjust=4)
plot(kernel_density,lwd=2, xlab='', ylim = c(0, 0.26), main = 'バンド幅を変える')
lines(kernel_density_1, col=2)
lines(kernel_density_2, col=4)
legend('topleft', col = c(1, 2, 4), lwd = 1, bty = 'n', legend = c('標準', '1/4', '4'))
mean(fish$length)
suuretu <- 1:1000
suuretu
length(suuretu)
suuretu <- 0:1000
suuretu
length(suuretu)
median(suuretu)
quantile(suuretu, probs = c(0.5))
quantile(suuretu, probs = c(0.25, 0.75))
quantile(suuretu, probs = c(0.025, 0.975))
birds <- read.csv('../book-data/2-2-1-bidss.csv')
birds
birds <- read.csv('../book-data/2-2-1-birds.csv')
birds <- read.csv('../book-data/2-1-1-birds.csv')
birds
cor(birds$body_length, birds$feather_length)
Nile
acf(
Nile,
type = 'covariance',
plot = 'F',
lag.max = 5
)
acf(
Nile,
type = 'covariance',
plot = 'F'
)
acf(
Nile,
type = 'covariance',
plot = 'F',
lag.max = 5
)
acf(
Nile,
plot = 'F',
lag.max = 5
)
acf(Nile)
library(ggplot2)
fish <- read.csv('../book-data/2-2-1-fish.csv')
head(fish, n=3)
ggplot(data=fish, mapping=aes(x = length)) + geom_histogram(alpha=0.5, bins=20) + labs(title='histgram')
ggplot(data=fish, mapping=aes(x = length))
geom_histogram(alpha=0.5, bins=20)
labs(title='histgram')
ggplot(data=fish, mapping=aes(x = length))
geom_histogram(alpha=0.5, bins=20)
labs(title='histgram')
ggplot(data=fish, mapping=aes(x = length)) + geom_histogram(alpha=0.5, bins=20) + labs(title='histgram')
geom_histogram(data=fish, mapping=aes(x=lenght), alpha=0.5, bins=20) + labs(title='histgram')
geom_histogram(data=fish, mapping=aes(x=lenght), alpha=0.5, bins=20) + labs(title='histgram')
ggplot(data=fish, mapping=aes(x = length)) + geom_histogram(alpha=0.5, bins=20) + labs(title='histgram')
geom_histogram(data=fish, mapping=aes(x=lenght), alpha=0.5, bins=20) + labs(title='histgram')
geom_histogram(ggplot(data=fish, mapping=aes(x=lenght)), alpha=0.5, bins=20) + labs(title='histgram')
geom_histogram(ggplot(data=fish, mapping=aes(x=lengh)), alpha=0.5, bins=20) + labs(title='histgram')
source('~/study/book-r-stan-bayesian-model-intro/code/ch3.R', echo=TRUE)
geom_histogram(ggplot(data=fish, mapping=aes(x = length)), alpha=0.5, bins=20) + labs(title='histgram')
ggplot(data=fish, mapping=aes(x = length)) + geom_histogram(alpha=0.5, bins=20) + labs(title='histgram')
source('~/study/book-r-stan-bayesian-model-intro/code/ch3.R', echo=TRUE)
geom_histogram(data=fish, mapping=aes(x = length), alpha=0.5, bins=20) + labs(title='histgram')
ggplot(data=fish, mapping=aes(x = length)) + geom_density(alpha=0.5, bins=20) + labs(title='histgram')
ggplot(data=fish, mapping=aes(x = length)) + geom_density(size=1.5) + labs(title='histgram')
ggplot(data=fish, mapping=aes(x = length)) + geom_density(size=1.5) + labs(title='kernel density')
ggplot(data=fish, mapping=(x=length, y=..density..)) + geom_histogram(alpha=0.5, bins=20) + geom_density(size=1.5) + labs(title = '重ね合わせ')
ggplot(data=fish, mapping=aes(x=length, y=..density..)) + geom_histogram(alpha=0.5, bins=20) + geom_density(size=1.5) + labs(title = '重ね合わせ')
fish
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
library(gridExtra)
library(gridExtra)
p_hist <- ggplot(data=fish, mapping=aes(x=length)) + geom_histgram(alpha=0.5, bins=20)+ labs(title='histgram')
p_density <- ggplot(data=fish, mapping=aes(x = length)) + geom_density(size=1.5) + labs(title='kernel density')
grid.arrange(p_hist, p_density)
p_hist <- ggplot(data=fish, mapping=aes(x=length)) + geom_histgram(alpha=0.5, bins=20)+ labs(title='histgram')
p_hist <- ggplot(data=fish, mapping=aes(x=length)) + geom_hist0gram(alpha=0.5, bins=20)+ labs(title='histgram')
p_hist <- ggplot(data=fish, mapping=aes(x=length)) + geom_histogram(alpha=0.5, bins=20)+ labs(title='histgram')
p_density <- ggplot(data=fish, mapping=aes(x = length)) + geom_density(size=1.5) + labs(title='kernel density')
grid.arrange(p_hist, p_density)
grid.arrange(p_hist, p_density, ncol=2)
head(iris, n=3)
p_box <- ggplot(data=iris, mapping=aes(x=Species, y=Petal.Length)) + geom_boxplot() + labs(title='boxplot')
p_box <- ggplot(data=iris, mapping=aes(x=Species, y=Petal.Length)) + geom_boxplot() + labs(title='boxplot')
pbox
pbox
pbox
p_box
p_box <- ggplot(data=iris, mapping=aes(x=Species, y=Petal.Length)) + geom_boxplot() + labs(title='box plot')
p_violin < ggplot(data=iris, mapping=aes(x=Species, y=Petal.Length)) + geom_violin() + labs(title='violin plot')
grid.arrange(p_box, p_violin)
p_violin < ggplot(data=iris, mapping=aes(x=Species, y=Petal.Length)) + geom_violin() + labs(title='violin plot')
p_violin <- ggplot(data=iris, mapping=aes(x=Species, y=Petal.Length)) + geom_violin() + labs(title='violin plot')
grid.arrange(p_box, p_violin)
grid.arrange(p_box, p_violin, ncol=2)
ggplot(data=iris, mapping=aes(x=Petal.Width, y=Petal.Length), color=Species) + geom_point() + labs(title='scatter plot')
ggplot(data=iris, mapping=aes(x=Petal.Width, y=Petal.Length, color=Species)) + geom_point() + labs(title='scatter plot')
Nile
nile_data_frame <- data.frame(
year = 1871:1970,
Nile = as.numeric(Nile)
)
head(nile_data_frame)
ggplot(data = nile_data_frame, mapping = aes(x = year, y = Nile)) + geom_line()
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
autoplot(Nile)
Nile
install.packages("rstan",
repos="https://cloud.r-project.org/",
dependencies=TRUE)
pkgbuild::has_build_tools(debug = TRUE)
rstan:::rstudio_stanc("calc-mean-variance.stan")
library(rstan)
library(rstan)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_1 <- read.csv('../book-data/2-4-1-beer-sales-1.csv')
file_beer_sales_1
head(file_beer_sales_1, n=3)
sample_size <- nrow(file_beer_sales_1)
sample_size
data_list <- list(sales = file_beer_sales_1, N = sample_size)
data_list
data_list <- list(sales = file_beer_sales_1$sales, N = sample_size)
data_list
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_1 <- read.csv('../book-data/2-4-1-beer-sales-1.csv')
head(file_beer_sales_1, n=3)
sample_size <- nrow(file_beer_sales_1)
sample_size
data_list <- list(sales = file_beer_sales_1$sales, N = sample_size)
data_list
mcmc_result <- stan(
file = 'calc-mean-variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
print()
print(mcmc_result, probs=c(0.025, 0.5, 0.975))
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_1 <- read.csv('../book-data/2-4-1-beer-sales-1.csv')
head(file_beer_sales_1, n=3)
sample_size <- nrow(file_beer_sales_1)
sample_size
data_list <- list(sales = file_beer_sales_1$sales, N = sample_size)
data_list
mcmc_result <- stan(
file = 'calc-mean-variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
data_list
mcmc_result <- stan(
file = 'calc-mean-variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_1 <- read.csv('../book-data/2-4-1-beer-sales-1.csv')
head(file_beer_sales_1, n=3)
sample_size <- nrow(file_beer_sales_1)
sample_size
data_list <- list(sales = file_beer_sales_1$sales, N = sample_size)
data_list
mcmc_result <- stan(
file = 'calc-mean-variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_1 <- read.csv('../book-data/2-4-1-beer-sales-1.csv')
head(file_beer_sales_1, n=3)
sample_size <- nrow(file_beer_sales_1)
sample_size
data_list <- list(sales = file_beer_sales_1$sales, N = sample_size)
data_list
mcmc_result <- stan(
file = 'calc-mean-variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
# 結果の表示
print(
mcmc_result,                   # MCMCサンプリングの結果
probs = c(0.025, 0.5, 0.975)   # 中央値と95%信用区間を出力
)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_1 <- read.csv('../book-data/2-4-1-beer-sales-1.csv')
head(file_beer_sales_1, n=3)
sample_size <- nrow(file_beer_sales_1)
sample_size
data_list <- list(sales = file_beer_sales_1$sales, N = sample_size)
mcmc_result <- stan(
file = 'calc-mean-variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
# 結果の表示
print(
mcmc_result,                   # MCMCサンプリングの結果
probs = c(0.025, 0.5, 0.975)   # 中央値と95%信用区間を出力
)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_beer_sales_1 <- read.csv('../book-data/2-4-1-beer-sales-1.csv')
head(file_beer_sales_1, n=3)
sample_size <- nrow(file_beer_sales_1)
sample_size
data_list <- list(sales = file_beer_sales_1$sales, N = sample_size)
mcmc_result <- stan(
file = 'calc-mean-variance.stan',
data = data_list,
seed = 1,
chains = 4,
iter = 2000,
warmup = 1000,
thin = 1
)
# 結果の表示
print(
mcmc_result,                   # MCMCサンプリングの結果
probs = c(0.025, 0.5, 0.975)   # 中央値と95%信用区間を出力
)
rstan:::rstudio_stanc("2-4-2-calc-mean-variance-vec.stan")
rstan:::rstudio_stanc("2-4-2-calc-mean-variance-vec.stan")
rstan:::rstudio_stanc("2-4-2-calc-mean-variance-vec.stan")
rstan:::rstudio_stanc("2-4-2-calc-mean-variance-vec.stan")
# パッケージの読み込み
library(rstan)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# データの読み込み ----------------------------------------------------------------
# 分析対象のデータ
file_beer_sales_1 <- read.csv("2-4-1-beer-sales-1.csv")
# データの確認
head(file_beer_sales_1, n = 3)
# Stanに渡すためにデータを整形する ------------------------------------------------------
# サンプルサイズ
sample_size <- nrow(file_beer_sales_1)
sample_size
# listにまとめる
data_list <- list(sales = file_beer_sales_1$sales, N = sample_size)
data_list
# MCMCによるサンプリングの実施 -----------------------------------------------------------------
# 乱数の生成
mcmc_result <- stan(
file = "2-4-1-calc-mean-variance.stan", # stanファイル
data = data_list,                       # 対象データ
seed = 1,                               # 乱数の種
chains = 4,                             # チェーン数
iter = 2000,                            # 乱数生成の繰り返し数
warmup = 1000,                          # バーンイン期間
thin = 1                                # 間引き数(1なら間引き無し)
)
# 結果の表示
print(
mcmc_result,                   # MCMCサンプリングの結果
probs = c(0.025, 0.5, 0.975)   # 中央値と95%信用区間を出力
)
# 分析対象のデータ
file_beer_sales_1 <- read.csv("2-4-1-beer-sales-1.csv")
# パッケージの読み込み
library(rstan)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# データの読み込み ----------------------------------------------------------------
# 分析対象のデータ
file_beer_sales_1 <- read.csv("2-4-1-beer-sales-1.csv")
# データの確認
head(file_beer_sales_1, n = 3)
# Stanに渡すためにデータを整形する ------------------------------------------------------
# サンプルサイズ
sample_size <- nrow(file_beer_sales_1)
sample_size
# listにまとめる
data_list <- list(sales = file_beer_sales_1$sales, N = sample_size)
data_list
# MCMCによるサンプリングの実施 -----------------------------------------------------------------
# 乱数の生成
mcmc_result <- stan(
file = "2-4-1-calc-mean-variance.stan", # stanファイル
data = data_list,                       # 対象データ
seed = 1,                               # 乱数の種
chains = 4,                             # チェーン数
iter = 2000,                            # 乱数生成の繰り返し数
warmup = 1000,                          # バーンイン期間
thin = 1                                # 間引き数(1なら間引き無し)
)
# 結果の表示
print(
mcmc_result,                   # MCMCサンプリングの結果
probs = c(0.025, 0.5, 0.975)   # 中央値と95%信用区間を出力
)
a
traceplot(mcmc_result)
traceplot(mcmc_result, inc_warmup=T)
mcmc_sample <- rstan::extract(mcmc_result, permuted = FALSE)
class(mcmc_sample)
dim(mcmc_sample)
dimnames(mcmc_sample)
mcmc_sample[1, 'chain:1', 'mu']
mcmc_sample['chain:1', 'mu']
mcmc_sample[, 'chain:1', 'mu']
length(mcmc_sample[, 'chain:1', 'mu'])
length(mcmc_sample[, , 'mu'])
dim(mcmc_sample[, , 'mu'])
class(mcmc_sample[, , 'mu'])
mu_mcmc_vec <- as.vector(mcmc_sample[, , 'mu'])
median(mu_mcmc_vec)
mean(mu_mcmc_vec)
quantile(mu_mcmc_vec, probs=c(0.025, 0.975))
print(
mcmc_result,                   # MCMCサンプリングの結果
probs = c(0.025, 0.5, 0.975)   # 中央値と95%信用区間を出力
)
library(ggfortify)
autoplot(ts(mcmc_sample[, , 'mu']),
facets = F,
ylab = 'mu',
main = 'trace plot')
mu_df <- data.frame(
mu_mcmc_sample = mu_mcmc_vec
)
ggplot(data = mu_df, mapping = aes(x = mu_mcmc_sample)) + geom_density(size=1.5)
library(bayesplot)
install.packages("bayesplot")
install.packages("bayesplot")
library(bayesplot)
library(bayesplot)
mcmc_hist(mcmc_sample, pars = c('mu', 'sigma'))
mcmc_dens(mcmc_sample, pars = c('mu', 'sigma'))
mcmc_trace(mcmc_sample, pars = c('mu', 'sigma'))
mcmc_combo(mcmc_sample, pars = c('mu', 'sigma'))
mcmc_intervals(
mcmc_sample, pars = c('mu', 'sigma'),
prob = 0.8,
prob_outer = 0.95
)
mcmc_ares(
mcmc_sample, pars = c('mu', 'sigma'),
prob = 0.6,
prob_outer = 0.99
)
mcmc_areas(
mcmc_sample, pars = c('mu', 'sigma'),
prob = 0.6,
prob_outer = 0.99
)
source('~/study/book-r-stan-bayesian-model-intro/code/2-4-stan_basic.R', echo=TRUE)
mcmc_acf_bar(mcmc_sample, pars = c('mu', 'sigma'))
animal_num <- read.csv('../book-data/2-5-1-animal-num.csv')
head(animal_num, n=3)
sample_size <- nrow(animal_num)
data_list <- list(animal_num= anima_num$animal_num, N=sample_size)
data_list <- list(animal_num= anima_lnum$animal_num, N=sample_size)
data_list <- list(animal_num= animal_num$animal_num, N=sample_size)
data_list <- list(animal_num= animal_num$animal_num, N=sample_size)
data_list
mcmc_normal <- stan(
file = 'poisson-dist.stan',
data = data_list,
seed = 1
)
